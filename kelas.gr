$m.sidang("Kelas", fn (uji) {
    uji("harus diawali huruf kapital", fn () {
        tuntut coba {
            kelas a {}
            salah
        } tahan (e) {
            tuntut e.pesan() == "Nama kelas harus diawali huruf kapital"
        } == benar
    })

    uji("itu Kelas", fn () {
        kelas Siswa {}

        tuntut Siswa itu Kelas
        tuntut Siswa itu Objek
        tuntut 2 itu Siswa == salah
        tuntut Siswa.baru() itu Siswa
    })

    uji(".baru() bisa membuat objek dari kelas tersebut", fn () {
        kelas Siswa {}

        ada siswa = Siswa.baru()

        tuntut siswa != nil
        tuntut siswa itu Siswa
        tuntut siswa itu Objek
    })

    xuji(".nama() mengutus nama kelas sebagai Kata", fn () {
        tuntut Masalah.nama() == "Masalah"

        kelas Siswa {}
        tuntut Siswa.nama() == "Siswa"

        ada s = Siswa.baru()
        tuntut s.metode().berisi?("nama") == salah

        tuntut 12.metode().berisi?("nama") == salah
        tuntut 12.5.metode().berisi?("nama") == salah
    })

    uji(".tipe() bisa lebih spesifik dari `itu`", fn () {
        kelas Siswa {}

        tuntut Siswa.baru().tipe() == Siswa
        tuntut 1 itu Angka
        tuntut 1 itu Integer
        tuntut 1.tipe() == Integer
        tuntut 1.tipe() != Angka
    })

    tentang("metode", fn () {
        uji("tidak merembet keluar", fn () {
            ada penghitungTanggalLahir

            kelas Tanggalanku {
                ada penghitungTanggalLahir = fn (umur) {
                    2020 - umur
                }

                fn tanggalLahir() {
                    tuntut penghitungTanggalLahir != nil
                    penghitungTanggalLahir(29)
                }

                fn definisiDalam() {}
            }

            tuntut Tanggalanku.baru().tanggalLahir() == 1991
            tuntut penghitungTanggalLahir == nil

            ada tidakTerdefinisikan = salah
            coba { definisiDalam() } tahan (e) { tidakTerdefinisikan = benar }
            tuntut tidakTerdefinisikan == benar
        })

        uji("tidak bisa diresolusi seperti pengenal variabel", fn () {
            tidakAda!(fn () { A })

            kelas A {
                ada a = "a"
                fn a () { a }

                fn b() { a }
            }

            ada a = A.baru()
            tuntut a.a() == "a"
            tuntut a.b() == "a"
        })

        uji("bisa berakhiran `=`", fn () {
            kelas A {
                ada a

                fn a() { a }
                fn a=(x) {
                    a = x
                }

                ada b
                ada c = fn (x) { b = x }
                fn b() { b }
                fn pengubah() { c }
            }

            ada a = A.baru()
            tuntut a.a() == nil
            tuntut a.a=(12)
            tuntut a.a() == 12
            tuntut a.a = 13
            tuntut a.a() == 13

            ada b

            tuntut a.b() == nil
            a.pengubah()(14)
            // todo: pastikan a.b() turut berubah nilainya
            // tuntut a.b() == 14
        })

        uji("bisa bernama mirip dengan variabel tapi tidak boleh menutup akses ke variabel tersebut", fn () {
            kelas Data {
                ada nilai = 1
                fn nilai() { nilai }
            }

            tuntut Data.baru().nilai() == 1
        })

        uji("dapat berpolimorfis", fn () {
            kelas Penyapa {
                fn sapa(nama) {
                    "Hai, " + nama
                }

                fn sapa(sapaan, nama) {
                    sapaan + nama
                }
            }

            ada penyapa = Penyapa.baru()
            tuntut penyapa.sapa("Gara") == "Hai, Gara"
            tuntut penyapa.sapa("Yo! ", "Gara") == "Yo! Gara"
        })

        uji("tidak dianggap sebagai fungsi statis", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn a () { "a" }
            }

            tuntut coba {
                A.a()
                salah
            } tahan (e) {
                tuntut e.pesan() == "kelas A tidak memiliki fungsi statis `a` tak berargumen yang bisa dipanggil"
                benar
            } == benar
        })

        uji("bisa bernama sama dengan metode kelas bawaan", fn () {
            ada a = 1
            a.tambah(1) == 2

            kelas Integer {
                fn tambah(a, b) { objekIni() + a + b }
            }

            a.tambah(1, 1) == 3
        })
    })

    uji("bisa diperkaya meski telah didefinisikan", fn () {
        kelas Siswa {
            fn namaKapital() { "GARA" }
        }

        ada siswa = Siswa.baru()
        ada namaKapitalLama = siswa.namaKapital()

        // todo: mereaksi() digunakan untuk mengetes jika objek dapat menjawab suatu panggilan
        // tuntut !siswa.mereaksi("fungsiBaruYangBelumAda")

        kelas Siswa {
            fn fungsiBaruYangBelumAda() {
                benar
            }
        }

        kelas Siswa {
            fn namaKapital() {
                "Gara"
            }
        }

        tuntut siswa.namaKapital() != namaKapitalLama
        tuntut siswa.fungsiBaruYangBelumAda() == benar
    })

    uji("pemerkayaan bersifat global dan permanen", fn () {
        kelas X1 {
        }

        ada x1Lama = X1.baru()

        fn () {
            kelas X1 {
                fn x1() { 1 }
            }
        }()

        tuntut X1.baru().x1() == 1
        tuntut x1Lama.x1() == 1
    })

    uji("dapat memperkaya kelas bawaan", fn () {
        kelas Deret {
            ada dataBaru

            fn dataBaru(d) { dataBaru = d }
            fn dataBaru() { dataBaru }
        }

        kelas Boolean {
            fn bolehAtauTidak() {
                "boleh"
            }
        }

        ada d = [1, 2, 3]
        d.dataBaru(10)
        tuntut d.dataBaru() == 10
        tuntut [].dataBaru() == nil

        ada b = benar
        tuntut b.bolehAtauTidak() == "boleh"
        tuntut salah.bolehAtauTidak() == "boleh"
    })

    tentang("variabel instansi", fn () {
        uji("dapat memiliki variabel instansi yang bernilai beda tiap objek", fn () {
            kelas Penghitung {
                ada angka

                // pengambil dan pengisi
                fn angka() { angka }
                fn angka(angka) { ini.angka = angka }

                fn tambah(angka) { ini.angka += angka }
                fn kurang(angka) { ini.angka -= angka }
            }

            ada p1 = Penghitung.baru()
            ada p2 = Penghitung.baru()
            ada p3 = Penghitung.baru()

            p1.angka(0)
            p2.angka(1)
            tuntut p1.angka() == 0
            tuntut p2.angka() == 1
            tuntut p3.angka() == nil

            p1.tambah(1)
            p1.tambah(1)
            p2.tambah(5)
            p1.tambah(1)
            tuntut p1.angka() == 3
            tuntut p2.angka() == 6

            p1.kurang(1)
            tuntut p1.angka() == 2
            p1.kurang(3)
            tuntut p1.angka() == -1

            tuntut p1.angka() != 0
            p1.angka(0)
            tuntut p1.angka() == 0
        })

        uji("dapat memiliki variabel instansi dengan nilai awal sesuai definisi", fn () {
            kelas Penghitung {
                ada angka1 = 5
                ada angka2 = 10

                fn angka1(angka1) { ini.angka1 = angka1 }
                fn angka2(angka2) { ini.angka2 = angka2 }

                fn jumlah() { angka1 + ini.angka2 }
                fn kurang() { ini.angka1 - angka2 }
                fn bagi() { ini.angka1 / ini.angka2 }
            }

            ada p1 = Penghitung.baru()
            ada p2 = Penghitung.baru()

            p2.angka1(30);

            tuntut p1.jumlah() == 15
            tuntut p2.jumlah() == 40

            tuntut p1.kurang() == -5
            tuntut p2.kurang() == 20

            tuntut p1.bagi() == 0
            tuntut p2.bagi() == 3
        })

        uji("`ini` dapat menyasar variabel intansi tanpa ambiguitas", fn () {
            kelas A {
                ada a

                fn a(n) {
                    ada a = 5 + n
                    a += 5
                    ini.a = a + 5
                }

                fn a() { a }
            }

            ada a = A.baru()
            tuntut a.a(1); tuntut a.a() == 5 + 1 + 5 + 5
            tuntut a.a(2); tuntut a.a() == 5 + 2 + 5 + 5
        })

        uji("dapat merefer ke variabel instansi atau metode tanpa `ini` selama tidak ambigu", fn () {
            kelas Penilai {
                ada nilai = 10

                fn nilai() { nilai }
                fn jumlahDengan(n) { nilai += n }
                fn jumlahLebihBanyakDengan(n) {
                    ada jumDg = jumlahDengan(n) + 100
                    nilai += jumDg
                }
            }

            ada p = Penilai.baru()
            ada p2 = Penilai.baru()
            tuntut p.nilai() == 10
            tuntut p2.nilai() == 10

            p.jumlahDengan(101)
            tuntut p.nilai() == 111

            p.jumlahLebihBanyakDengan(104)
            tuntut p.nilai() == 530 // 111 + 104 + (215 + 100)
        })

        uji("variabel instansi yang bernilai fungsi tidak boleh dianggap sebagai metode", fn () {
            kelas A {
                ada a1 = fn a2 () { "a" }

                fn bisa() { a1() + b1() }
                fn tidakBisa() { a2() + b2() }

                pribadi {
                    ada b1 = fn b2 () { "b" }
                }
            }

            ada a = A.baru()

            // karena menjadi variabel instansi
            tuntut coba {
                a.a1()
                salah
            } tahan (e) {
                tuntut e.pesan() == "objek tipe A tidak memiliki metode `a1` tak berargumen yang bisa dipanggil"
                benar
            } == benar

            tuntut coba {
                a.a2()
                salah
            } tahan (e) {
                tuntut e.pesan() == "objek tipe A tidak memiliki metode `a2` tak berargumen yang bisa dipanggil"
                benar
            } == benar

            tuntut !a.metode().berisi?("a2")

            tuntut coba {
                a.b1()
                salah
            } tahan (e) {
                tuntut e.pesan() == "objek tipe A tidak memiliki metode `b1` tak berargumen yang bisa dipanggil"
                benar
            } == benar

            tuntut coba {
                a.b2()
                salah
            } tahan (e) {
                tuntut e.pesan() == "objek tipe A tidak memiliki metode `b2` tak berargumen yang bisa dipanggil"
                benar
            } == benar

            tuntut a.bisa() == "ab"

            tuntut coba {
                a.tidakBisa()
                salah
            } tahan (e) {
                tuntut e.pesan() == "identitas tidak ditemukan: a2"
                benar
            }
        })
    })

    uji("`ini` dapat menyasar fungsi dari instansi tanpa ambiguitas", fn () {
        kelas Penyapa {
            ada nilai

            fn nilai() { nilai }

            fn sapa(nama) {
                ada sapaan = "Yo!"
                ini.nilai = ini.sapaan() + nama
                sapaan
            }

            fn sapaan() {
                "Halo, "
            }
        }

        ada p = Penyapa.baru()
        ada sapaan = p.sapa("Gara")
        tuntut sapaan == "Yo!"
        tuntut p.nilai() == "Halo, Gara"
    })

    uji("`ini` dapat meresolusi pesan berantai", fn () {
        kelas Alamat {
            ada kota
            ada jalan

            fn kota() { kota }
            fn kota(v) { kota = v}

            fn jalan() { jalan }
            fn jalan(v) { jalan = v }
        }

        kelas Sekolah {
            ada nama
            ada alamat

            fn nama() { nama }
            fn nama(v) { nama = v }

            fn alamat() { alamat }
            fn alamat(v) {
                tuntut v itu Alamat
                alamat = v
            }

            fn ubahNamaJalan(namaBaru) {
                ini.alamat().jalan(namaBaru)
            }

            fn alamatLengkap() {
                ini.alamat().jalan() + ", " + alamat().kota()
            }
        }

        ada surabaya = Alamat.baru()
        surabaya.kota("Surabaya")
        surabaya.jalan("Jalan ABC")

        ada jakarta = Alamat.baru()
        jakarta.kota("Jakarta")
        jakarta.jalan("Jalan DEF")

        ada s = Sekolah.baru()
        s.alamat(surabaya)

        tuntut s.alamatLengkap() == "Jalan ABC, Surabaya"
        s.ubahNamaJalan("Jalan Usman Sadar")
        tuntut s.alamatLengkap() == "Jalan Usman Sadar, Surabaya"
        tuntut s.alamat().jalan() == "Jalan Usman Sadar"
    })

    uji("`ini` dapat digunakan berdampingan dengan berbagai macam operator", fn () {
        kelas Koleksi {
            ada nilai = []
            ada checksum = 0

            fn nilai() { nilai }
            fn checksum() { checksum }

            fn masukkan(item) {
                nilai << item
                ini.nilai << item

                checksum += 2
                ini.checksum += 2

                checksum -= 1
                ini.checksum -= 1

                checksum *= 10
                ini.checksum *= 10

                checksum /= 2
                ini.checksum /= 2
            }

            fn jumlah() {
                ada i = 0
                ada jml = 0

                selama (i < nilai.panjang()) {
                    jml += nilai[i]
                    i += 1
                }

                utus jml
            }
        }

        ada k = Koleksi.baru()
        k.masukkan(1)
        k.masukkan(2)

        tuntut k.nilai() == [1, 1, 2, 2]
        tuntut k.jumlah() == 6
        tuntut k.checksum() == 1300
    })

    uji("metode dari suatu kelas, tidak seperti fungsi, tidak dapat diutus keluar", fn () {
        kelas Penyapa {
            ada penyapa = fn () { "Halo!" }
            fn fungsiPenyapa() { penyapa }
            fn katakanSapaan() { penyapa() }

            fn selamatPagi() { "Selamat Pagi" }
            fn fungsiSelamatPagi() { selamatPagi }
            fn katakanSelamatPagi() { selamatPagi() }
        }

        ada p = Penyapa.baru()

        tuntut p.katakanSapaan() == "Halo!"
        tuntut p.katakanSelamatPagi() == "Selamat Pagi"

        tuntut p.fungsiPenyapa() itu Fungsi
        tuntut p.fungsiPenyapa()() == "Halo!"

        //tuntut p.fungsiSelamatPagi() == nil
    })

    uji("mengakses metode yang tidak ada", fn () {
        kelas A {
            fn a(x) { ini.y = x }
            fn b(x) { y = x }
        }

        ada a = A.baru()

        coba { a.z() }
        tahan (e) { tuntut e itu MasalahMetode }

        coba { a.a(10) }
        tahan (e) { tuntut e itu MasalahPengenal }

        coba { a.b(10) }
        tahan (e) { tuntut e itu MasalahPengenal }
    })

    // todo: add test about `ini` on the interpreter level when setReceivingObject is nil `ini.number = `1` directly as a statement

    uji("`ini` dapat merujuk ke variabel instansi atau metode yang sesuai", fn () {
        kelas A {
            ada a = "variabel"
            fn a() { "metode" }

            fn dapatkanVarTanpaIni() { a }
            fn dapatkanVarDenganIni() { ini.a }

            fn dapatkanMetodeTanpaIni() { a() }
            fn dapatkanMetodeDenganIni() { ini.a() }
        }

        ada a = A.baru()
        ada nilaiVar = "variabel"
        ada nilaiMet = "metode"

        tuntut a.a() == nilaiMet
        tuntut a.dapatkanVarTanpaIni() == nilaiVar
        tuntut a.dapatkanVarDenganIni() == nilaiVar

        tuntut a.dapatkanMetodeTanpaIni() == nilaiMet
        tuntut a.dapatkanMetodeDenganIni() == nilaiMet
    })

    uji(".kobit() mencetak kode bibit", fn () {
        tuntut Kelas.kobit() != Masalah.kobit()
        tuntut Masalah.kobit() != MasalahArgumen.kobit()
        tuntut MasalahArgumen.kobit() != MasalahMetode.kobit()
    })

    tentang("blok `pribadi`", fn () {
        uji("bisa mendefinisikan metode yang bersifat pribadi", fn () {
            kelas Penyapa {
                fn selamatPagi(nama) {
                    sapa(nama) + ". Selamat pagi."
                }

                pribadi {
                    fn sapa(nama) {
                        "Halo, " + nama
                    }
                }
            }

            ada p = Penyapa.baru()
            tuntut p.selamatPagi("Adam") == "Halo, Adam. Selamat pagi."

            tuntut coba {
                p.sapa("Adam")
                salah
            } tahan (e) {
                tuntut e itu Masalah
                tuntut e.pesan() == "`sapa` adalah metode pribadi kelas Penyapa yang hanya bisa dipanggil dari dalam"
                benar
            } == benar

            tuntut p.metode().berisi?("sapa") == salah
        })

        uji("bisa mendefinisikan variabel instansi yang tidak tercetak saat inspeksi", fn () {
            kelas A {
                ada a = 123

                fn a() { a }

                fn b() { b }

                pribadi {
                    ada b = "b"
                }
            }

            ada a = A.baru()
            tuntut a.jadiKata().berisi?("a=123")
            tuntut a.jadiKata().berisi?("b=") == salah
            tuntut a.b() == "b"
        })

        uji("bisa mendefinisikan variabel instansi yang memiliki fungsi yang bisa dipanggil", fn () {
            tidakAda!(fn () { A }) // todo: ubah ke: belumAda! { "A" }

            kelas A {
                fn a() { aPribadi() }

                pribadi {
                    ada aPribadi = fn () { "a" }
                }
            }

            tuntut A.baru().a() == "a"
        })
    })

    tentang("penggunaan kata kunci `sta`", fn () {
        tentang("variabel", fn () {
            uji("tidak bercampur dengan pengenal statis dari kelas-kelas lain", fn () {
                kelas A {
                    ada sta a
                }

                kelas B {
                    ada sta b
                }

                tuntut coba { A.b; salah } tahan (e) { tuntut e.pesan() == "tidak dapat meresolusi identitas statis `b`"; benar } == benar
                tuntut coba { B.a; salah } tahan (e) { tuntut e.pesan() == "tidak dapat meresolusi identitas statis `a`"; benar } == benar
            })

            uji("tidak dapat diubah dari luar kelas", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    ada sta NILAI = 1
                }

                tuntut coba {
                    A.NILAI = 2
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "tidak diperkenankan mengubah nilai variabel statis `NILAI` dari luar kelas"
                    benar
                } == benar

                tuntut A.NILAI == 1
            })

            uji("dapat mengambil nilai dari variabel statis lain", fn () {
                kelas A {
                    ada sta nilaiLama = 123
                    ada sta nilai = nilaiLama
                }

                tuntut A.nilaiLama == 123
                tuntut A.nilai == 123
            })

            uji("hanya dapat mengambil nilai dari pengenal variabel", fn () {
                kelas A {
                    ada sta a = "a1"
                    ada sta staA = a

                    fn a() { "a2" }
                }

                tuntut A.a == "a1"
                tuntut A.staA == "a1"
                tuntut A.baru().a() == "a2"

                tuntut coba {
                    kelas B {
                        ada sta fnB = b
                        fn b () {}
                    }
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "identitas tidak ditemukan: b"
                    benar
                } == benar
            })

            xuji("tidak dapat diakses dari suatu instansi", fn () {
                // ada a = A.baru() // A punya statis variabel
                // a.statis
            })

            uji("dapat memiliki nilai awal", fn () {
                kelas A {
                    ada sta nilai = "a"
                    ada sta a = "a"
                }

                kelas B {
                    ada sta nilai = "b"
                    ada sta kelasA = A
                    ada sta b = "b"
                }

                // variabel statis dengan pengenal yang berbeda
                tuntut A.a == "a"
                tuntut B.b == "b"

                // variabel statis dengan pengenal yang sama
                tuntut A.nilai == "a"
                tuntut B.nilai == "b"
                tuntut B.kelasA.nilai == "a"
            })

            uji("dapat bersifat statis dan pribadi", fn () {
                kelas A {
                    pribadi {
                        ada sta nilaiPribadi = "ap"
                    }

                    ada sta nilaiDariPribadi1 = nilaiPribadi
                    ada sta nilaiDariPribadi2 = A.nilaiPribadi
                }

                tuntut A.nilaiDariPribadi1 == "ap"
                tuntut A.nilaiDariPribadi2 == "ap"

                tuntut coba {
                    A.nilaiPribadi
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "tidak dapat meresolusi identitas statis `nilaiPribadi` yang bersifat pribadi"
                    benar
                } == benar
            })

            uji("jika tidak dapat diresolusi akan menjadi masalah", fn () {
                kelas A {}

                tuntut coba {
                    A.nilai
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "tidak dapat meresolusi identitas statis `nilai`"
                    benar
                } == benar
            })

            xuji("tidak bisa didefinisikan di dalam sebuah metode", fn () {
                // setelah memiliki fungsi eval
                // tuntut coba {
                //     kelas A {
                //         fn a() {
                //             ada sta x = 12
                //         }
                //     }
                //     salah
                // } tahan (e) {
                //     cetak(e.pesan())
                //     tuntut e.pesan() == ""
                //     benar
                // } == benar
            })

            uji("tidak dapat dieksekusi seperti metode kecuali jika fungsi", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    ada sta a = 12
                    ada sta b = fn () { "b" }

                    pribadi {
                        ada sta c = fn () { "c" }
                    }

                    ada sta d = c
                }

                tuntut coba {
                    A.a()
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "kelas A tidak memiliki fungsi statis `a` tak berargumen yang bisa dipanggil"
                    benar
                } == benar

                tuntut A.b itu Fungsi
                tuntut A.b() == "b"

                tuntut coba {
                    A.c()
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "kelas A tidak memiliki fungsi statis `c` tak berargumen yang bisa dipanggil"
                    benar
                } == benar

                tuntut A.d() == "c"
            })
        })

        tentang("fungsi", fn () {
            uji("bermasalah jika fungsi statis tidak terdefinisikan", fn () {
                tidakAda!(fn () { A })

                kelas A {}

                tuntut coba {
                    A.XYZ = 12
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "kelas A tidak memiliki fungsi statis `XYZ=` berargumen 1 yang bisa dipanggil"
                    benar
                } == benar

                tuntut coba {
                    A.xyz()
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "kelas A tidak memiliki fungsi statis `xyz` tak berargumen yang bisa dipanggil"
                    benar
                } == benar
            })

            uji("bisa mendefinisikan fungsi statis", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta a() { "a" }
                }

                tuntut coba {
                    A.a
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "tidak dapat meresolusi identitas statis `a`"
                    benar
                } == benar
            })

            uji("bisa bernama sama dengan metode", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta a() { "statis" }
                    fn a() { "metode" }
                }

                ada a = A.baru()
                tuntut a.a() == "metode"
                tuntut A.a() == "statis"
            })

            uji("fungsi statis bisa memiliki argumen yang bernama sama dengan identitas fungsi", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta x(x) { x.jadiKata() }
                }

                tuntut A.x(1) == "1"
                tuntut A.x([1,2,3]) == [1,2,3].jadiKata()
            })

            uji("bisa memanggil fungsi statis", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta a() { "a" }
                    fn sta b() { "b" }
                    fn sta ab() { a() + b() }
                    fn sta abc() { a() + b() + c() }

                    fn sta x(x) { x.jadiKata() }
                    fn sta abcx(arg) { abc() + x(arg) }

                    pribadi {
                        fn sta c() { "c" }
                    }
                }

                tuntut A.a() == "a"
                tuntut A.b() == "b"
                tuntut A.ab() == "ab"
                tuntut A.abc() == "abc"
                tuntut A.x(123) == "123"
                tuntut A.abcx(123) == "abc123"
            })

            uji("bisa diresolusi dengan atau tanpa menggunakan identitas kelas", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta x(x) { x.jadiKata() }
                    fn sta aa() { x("a") + A.x("a") }
                }

                tuntut A.aa() == "aa"
            })

            uji("bisa diresolusi meski multi-bentuk", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta a(arg1, arg2) { arg1 + arg2 }
                    fn sta a(arg1) { A.a(arg1, 1) + a(arg1, 1) }
                    fn sta a() { a(1) }
                }

                tuntut A.a(1, 1) == 2
                tuntut A.a(1) == 4
                tuntut A.a() == 4
            })

            uji("tidak dianggap metode kelas", fn () {
                tidakAda!(fn () { A })

                kelas A {
                    fn sta a() { "a" }
                }

                ada a = A.baru()
                tuntut !a.metode().berisi?("a")

                tuntut coba {
                    a.a()
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "objek tipe A tidak memiliki metode `a` yang bisa dipanggil"
                    benar
                } == benar
            })

            uji("tidak dianggap sebagai variabel", fn () {
                kelas A {
                    fn sta a() { "a" }
                }

                tuntut coba {
                    A.a
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "tidak dapat meresolusi identitas statis `a`"
                    benar
                } == benar

                tuntut A.a() == "a"
            })

            uji("bisa bersifat pribadi", fn () {
                kelas A {
                    fn sta a() { "a" }
                    fn sta ab() { a() + b() }

                    pribadi {
                        fn sta b() { "b" }
                    }
                }

                tuntut A.a() == "a"
                tuntut A.ab() == "ab"

                tuntut coba {
                    A.b()
                    salah
                } tahan (e) {
                    tuntut e.pesan() == "`b` adalah fungsi statis bersifat pribadi kelas A yang hanya bisa dipanggil dari dalam"
                    benar
                } == benar
            })

            tentang("menimpali fungsi statis `.baru`", fn () {
                uji("harus mengutus objek dengan kelas yang sama", fn () {
                    tidakAda!(fn () { A })

                    kelas A {
                        fn sta baru() { 1 } // mengutus yang bukan instansi A
                        fn sta baru(arg) { arg } // mengutus yang bukan instansi A
                        fn sta baru(arg1, arg2) { Refleksi.cipta!(A) } // menciptakan kelas lewat refleksi
                        fn sta baru(arg1, arg2, arg3) { baru() } // memanggil baru tanpa identitas kelas
                    }

                    tuntut coba {
                        A.baru()
                        salah
                    } tahan (e) {
                        tuntut e itu MasalahKelas
                        tuntut e.pesan() == "proses inisialisasi harus mengutus objek bertipe kelas yang sama"
                        benar
                    } == benar

                    tuntut coba {
                        A.baru()
                        salah
                    } tahan (e) {
                        tuntut e itu MasalahKelas
                        tuntut e.pesan() == "proses inisialisasi harus mengutus objek bertipe kelas yang sama"
                        benar
                    } == benar

                    tuntut coba {
                        A.baru(1)
                        salah
                    } tahan (e) {
                        tuntut e itu MasalahKelas
                        tuntut e.pesan() == "proses inisialisasi harus mengutus objek bertipe kelas yang sama"
                        benar
                    } == benar

                    tuntut A.baru(1, 2) itu A

                    tuntut coba {
                        A.baru(1, 2, 3)
                        salah
                    } tahan (e) {
                        tuntut e.pesan() == "proses inisialisasi harus mengutus objek bertipe kelas yang sama"
                        benar
                    } == benar
                })

                uji("bisa menjadi fungsi statis pribadi", fn () {
                    tidakAda!(fn () { A })

                    kelas A {
                        ada a

                        fn a() { a }
                        fn a=(x) { a = x }

                        fn sta baru(a) {
                            ada obj = baru()
                            obj.a = a
                            obj
                        }

                        pribadi {
                            fn sta baru() { super() }
                        }
                    }

                    ada a = A.baru(123)
                    tuntut a.a() == 123

                    tuntut coba {
                        A.baru()
                        salah
                    } tahan (e) {
                        tuntut e.pesan() == "`baru` adalah fungsi statis bersifat pribadi kelas A yang hanya bisa dipanggil dari dalam"
                        benar
                    } == benar
                })

                xuji("tidak boleh melakukan pemanggilan metode kelas", fn () {

                })

                xuji("hanya boleh melakukan penyetelan", fn () {

                })

                xuji("dapat mendefinisikan fungsi statis `.baru()` dengan varian argumen lain", fn () {

                })

                xuji("dapat memanggil fungsi statis `baru` lainnya", fn () {

                })
            })
        })
    })

    tentang("kelas dalam namespace", fn () {
        uji("bisa didefinisikan dan diresolusi menggunakan `::`", fn () {
            tidakAda!(fn () { A })
            tidakAda!(fn () { A::B })
            tidakAda!(fn () { A::C })

            kelas A {
                kelas B {}
                kelas C {
                    kelas D {
                        kelas E {}
                    }
                }
            }

            tuntut A itu Kelas
            tuntut A::B itu Kelas
            tuntut A::C itu Kelas
            tuntut A::C::D itu Kelas
            tuntut A::C::D::E itu Kelas

            tuntut A::B.baru() itu A::B
            tuntut A::C::D::E.baru() itu A::B == salah

            tidakAda!(fn () { B })
            tidakAda!(fn () { C })
            tidakAda!(fn () { B::C })
            tidakAda!(fn () { A::B::C })
        })

        uji("menyatakan nama kelas fully-qualified tanpa `::` jika tidak ditemukan", fn () {
            tidakAda!(fn () { A })

            tuntut coba {
                ::A
                salah
            } tahan (e) {
                tuntut e.pesan() == "identitas tidak ditemukan: A"
                benar
            } == benar

            kelas A {}

            tuntut A itu Kelas
            tuntut ::A itu Kelas
            tuntut ::A == A
            tuntut ::A == ::A
            tuntut A == A
        })

        uji("bisa menjangkau kelas dengan nama yang sama yang berada di luar", fn () {
            kelas A {}

            kelas B {
                kelas A {}

                fn sta aKu() { A.baru() } // tes menerima pemanggilan
                fn sta aKu?(a) { a.tipe() == A } // tes pengenal

                fn sta aNya() { ::A.baru() } // tes menerima pemanggilan
                fn sta aNya?(a) { a.tipe() == ::A } // tes pengenal
            }

            tuntut B.aKu?(B::A.baru()) == benar
            tuntut B.aKu?(A.baru()) == salah

            tuntut B.aNya?(B::A.baru()) == salah
            tuntut B.aNya?(A.baru()) == benar

            tuntut B.aKu() itu B::A
            tuntut B.aNya() itu A
        })

        uji("pengenal kelas tidak boleh diawali dengan `::`", fn () {
            tuntut coba {
                kelas ::A {}
                salah
            } tahan (e) {
                tuntut e.pesan() == "pengenal kelas tidak boleh diawali dengan `::`"
                benar
            } == benar

            tuntut coba {
                kelas A {
                    kelas ::B {}
                }
                salah
            } tahan (e) {
                tuntut e.pesan() == "pengenal kelas tidak boleh diawali dengan `::`"
                benar
            } == benar
        })

        uji("bisa diresolusi dengan benar meski ada kelas dengan nama yang mirip tapi dalam namespace yang berbeda", fn () {
            tidakAda!(fn () { Koneksi })
            tidakAda!(fn () { Sertifikat })
            tidakAda!(fn () { HTTP::Koneksi })

            kelas Koneksi {}
            kelas Sertifikat {}

            kelas HTTP {
                kelas Koneksi {}

                fn sta buatKoneksi() {
                    Koneksi.baru() // tes menerima panggilan
                }

                fn sta sekoneksi?(a) {
                    a.tipe() == Koneksi // tes pengenal
                }

                fn sta periksaSertifikat(s) {
                    s.tipe() == Sertifikat // test pengenal
                }

                fn sta buatSertifikat() {
                    Sertifikat.baru() // tes menerima panggilan
                }
            }

            tuntut Koneksi.baru() itu Koneksi
            tuntut HTTP::Koneksi.baru() itu HTTP::Koneksi
            tuntut HTTP.buatKoneksi() itu HTTP::Koneksi
            tuntut HTTP.sekoneksi?(Koneksi.baru()) == salah
            tuntut HTTP.sekoneksi?(HTTP::Koneksi.baru()) == benar
            tuntut HTTP.buatSertifikat() itu Sertifikat
            tuntut HTTP.periksaSertifikat(Sertifikat.baru()) == benar
            tuntut HTTP.periksaSertifikat(HTTP::Koneksi.baru()) == salah

            tidakAda!(fn () { A })

            kelas A {
                kelas B {}
            }

            tuntut A itu Kelas
            tuntut A::B itu Kelas
        })

        uji("tidak bisa didefinisikan jika hirarki kelas sebelumnya belum terdefinisikan", fn () {
            tuntut coba {
                kelas A::B {}
                salah
            } tahan (e) {
                tuntut e.pesan() == "tidak bisa mendefinisikan kelas karena `A` belum terdefinisikan"
                benar
            } == benar

            tuntut coba {
                kelas A::B::C {}
                salah
            } tahan (e) {
                tuntut e.pesan() == "tidak bisa mendefinisikan kelas karena `A::B` belum terdefinisikan"
                benar
            } == benar

            tuntut coba {
                kelas A {
                    kelas B {}
                    kelas B::C {}
                    kelas B::C::D::E {}
                }
                salah
            } tahan (e) {
                tuntut e.pesan() == "tidak bisa mendefinisikan kelas karena `A::B::C::D` belum terdefinisikan"
                benar
            } == benar
        })

        uji("jika kelas utama bersifat sementara, maka kelas dalam kelas juga bersifat sementara", fn () {
            ada cek = []

            fn () {
                kelas A {
                    kelas B {}
                    kelas C {}
                }

                cek << A itu Kelas
                cek << A::B itu Kelas
                cek << A::C itu Kelas
            }()

            tuntut cek == [benar, benar, benar]

            tidakAda!(fn() { A })
            tidakAda!(fn () { A::B })
            tidakAda!(fn () { A::C })
        })
    })
})
