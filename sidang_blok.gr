// Hak Cipta (c) 2021 Adam Notodikromo.
// Hak cipta dilindungi undang-undang.
// Penggunaan tunduk pada aturan lisensi.

sidang("Blok", fn () {
    tentang("Variabel", fn () {
        ia("bisa diubah dari dalam fungsi", fn () {
            ada a = 1
            ada b = 2

            fn () {
                ada c = 3

                fn () {
                    tuntut a == 1
                    tuntut b == 2
                    tuntut c == 3

                    a = 3
                    b = 4
                    c = 5

                    tuntut a == 3
                    tuntut b == 4
                    tuntut c == 5
                }()

                tuntut a == 3
                tuntut b == 4
                tuntut c == 5
            }()

            tuntut a == 3
            tuntut b == 4

            tuntut coba {
                c
                salah
            } tahan (e) {
                tuntut e.pesan() == "identitas tidak ditemukan: c"
                benar
            } == benar
        })

        ia("tidak berubah jika diidentifikasi ulang dari dalam fungsi", fn () {
            ada a = 1
            ada b = 2

            fn () {
                ada b = 7
                ada c = 3

                fn () {
                    tuntut a == 1
                    tuntut b == 7
                    tuntut c == 3

                    ada c = 5
                    a = 3
                    b = 8

                    tuntut a == 3
                    tuntut b == 8
                    tuntut c == 5
                }()

                tuntut a == 3
                tuntut b == 8
                tuntut c == 5
            }()

            tuntut a == 3
            tuntut b == 8

            tuntut coba {
                c
                salah
            } tahan (e) {
                tuntut e.pesan() == "identitas tidak ditemukan: c"
                benar
            } == benar
        })
    })

    ia("dari dalam fungsi yang sama, variable dapat merembet ke luar", fn() {
        ada nilai = 0

        jika (benar) {
            nilai = 1
        }

        tuntut nilai == 1
    })

    ia("dari dalam fungsi yang berbeda, identitas merembet ke environment luar jika telah didefinisikan", fn () {
        ada nilai = 0
        tuntut nilai == 0

        fn () {
            tuntut nilai == 0
            nilai += 1
            tuntut nilai == 1

            ada nilaiBaruDidefinisikan = 1

            kelas A {}
            tuntut A itu Kelas
            tuntut A.baru() itu A

            fn () {
                nilai += 1
                tuntut nilai == 2

                nilaiBaruDidefinisikan += 1
            }()

            tuntut nilai == 2
            tuntut nilaiBaruDidefinisikan == 2
        }()

        tuntut nilai == 2
        tuntut coba { A.baru(); salah } tahan { benar } == benar
        tuntut coba { nilaiBaruDidefinisikan == 2 } tahan (e) { e.pesan().berisi?("identitas tidak ditemukan: nilaiBaruDidefinisikan") }
    })

    ia("dari dalam fungsi yang berbeda, identitas bisa merembet jika diutus", fn () {
        ada kelasA = fn () { kelas A {} }()
        ada kelasB = fn () {
            jika (benar) {
                kelas B {}
                utus B
            }

            utus 3
        }()

        tuntut kelasA itu Kelas
        tuntut kelasB itu Kelas
        tuntut tidakAda!(fn () { A })
        tuntut tidakAda!(fn () { B })
    })

    ia("kelas memiliki bloknya sendiri yang tidak merembet keluar", fn () {
        ada angka = 1
        ada fn1 = fn () { 1 }

        kelas Sesuatu {
            ada angka = 2
            ada fn2 = fn () { 2 }

            fn angka() { angka }
            fn fn1() { fn2() }
        }

        tuntut angka == 1
        tuntut fn1() == 1

        ada sesuatu = Sesuatu.baru()
        tuntut sesuatu.angka() == 2
        tuntut sesuatu.fn1() == 2
    })

    ia("kelas memiliki bloknya sendiri yang dari luar tidak bisa merembet kedalam", fn () {
        ada angka = 1

        tidakAda!(fn () { A })
        kelas A {}

        fn () {
            ada b = 1
            tuntut b == 1

            kelas A {
                fn a() { b }
            }

            tuntut coba {
                A.baru().a()
                salah
            } tahan (e) {
                tuntut e itu MasalahPengenal
                tuntut e.pesan() == "identitas tidak ditemukan: b"
                benar
            } == benar
        }()

        kelas A {
            ada b = 12

            kelas B {
                fn a() { b }
            }
        }

        tuntut A.baru().a() == 12

        tuntut coba {
            tuntut A::B.baru().a() == 12
            salah
        } tahan (e) {
            tuntut e itu MasalahPengenal
            tuntut e.pesan() == "identitas tidak ditemukan: b"
            benar
        } == benar
    })

    ia("variabel akan selalu diresolve terlebih dahulu kecuali untuk pemanggilan fungsi", fn () {
        ada x = 1
        fn y() { 4 }

        fn () {
            fn x() { 2 }

            fn () {
                fn x() { "X Paling Dalam" }

                tuntut x == 1
                tuntut x itu Integer
                tuntut x() == "X Paling Dalam"
                tuntut y itu Fungsi
                tuntut y() == 4
            }()

            tuntut x == 1
            tuntut x() == 2
            tuntut y itu Fungsi
            tuntut y() == 4
        }()

        tuntut x == 1
        tuntut x itu Integer
        tuntut y() == 4
        tuntut y itu Fungsi
    })

    ia("blok kelas dapat mengakses kelas lain dalam blok luar", fn () {
        kelas A {}
        kelas B {
            fn apakahBenar() {
                ada a = A.baru()
                ada c = C.baru()
                a itu A && c itu C
            }
        }
        kelas C {}

        tuntut B.baru().apakahBenar() == benar
    })

    ia("blok kelas dapat mengakses diri sendiri dari dalam metode", fn () {
        kelas A {
            ada nilai
            fn nilai(n) { nilai = n }
            fn nilai() { nilai }

            fn buatBaru() {
                ada a = A.baru()
                a.nilai(100)
                utus a
            }
        }

        ada aLama = A.baru()
        ada aBaru = aLama.buatBaru()

        tuntut aLama.nilai() == nil
        tuntut aBaru.nilai() == 100
    })

    ia("blok metode yang menerima fungsi adalah dari objek dimana metode tersebut berasal", fn () {
        kelas A {
            fn catatan() { "a" }
            fn denganFungsi(f) {
                f(catatan())
            }
        }

        kelas B {
            fn catatan() { "b" }
            fn denganFungsi() {
                ada a = A.baru()
                a.denganFungsi(fn (catatanDariA) {
                    catatan() + catatanDariA
                })
            }
        }

        tuntut A.baru().catatan() == "a"
        tuntut B.baru().catatan() == "b"

        tuntut B.baru().denganFungsi() == "ba"
    })

    ia("blok `pribadi` hanya bisa digunakan di dalam kelas", fn () {
        tuntut coba {
            pribadi {
                fn xyz() {}
            }

            salah
        } tahan (e) {
            tuntut e.pesan() == "blok `pribadi` hanya bisa digunakan di dalam kelas"
            benar
        } == benar
    })
})
