sidang(Fungsi, fn () {
    ada fungsi = fn () {}

    ia("itu Fungsi", fn () {
        tuntut Fungsi itu Kelas
        tuntut Fungsi itu Objek

        tuntut fungsi itu Fungsi
        tuntut fungsi itu Objek

        tuntut !(fungsi itu Kelas)
    })

    ia("merupakan closure", fn () {
        ada fungsiPenambah = fn (x) {
            utus fn (y) { x + y }
        }

        ada tambah5 = fungsiPenambah(5)
        ada tambah7 = fungsiPenambah(7)

        tuntut tambah5(5) == 10
        tuntut tambah5(tambah7(3)) == 15
    })

    ia("bisa diasosiasikan dengan pengenal", fn () {
        ada tambah = fn (x, y) { x + y }

        tuntut tambah(5, 5) == 10
        tuntut tambah(5 + 5, tambah(5, 5)) == 20
    })

    ia("bisa memiliki nama", fn () {
        ada fn1 = fn fn2(x) { x + 1 }

        tuntut fn1 == fn2
        tuntut fn1(1) == 2
        tuntut fn2(1) == 2
    })

    ia("pengenal tidak boleh diawali dengan tanda $", fn () {
        tuntut coba {
            fn $abc() {}
            salah
        } tahan (e) {
            tuntut e.pesan() == "nama fungsi tidak boleh diawali dengan `$`"
            benar
        } == benar

        tuntut coba {
            kelas ABC {
                fn $abc() {}
            }
            salah
        } tahan (e) {
            tuntut e.pesan() == "nama fungsi tidak boleh diawali dengan `$`"
            benar
        } == benar
    })

    ia("pengenal tidak boleh diawali dengan huruf besar", fn () {
        tuntut coba {
            fn SebuahFungsi() {}
            salah
        } tahan (e) {
            tuntut e.pesan() == "nama fungsi tidak boleh menyerupai nama kelas SebuahFungsi"
            benar
        } == benar

        tuntut coba {
            kelas ABC {
                fn SebuahFungsi() {}
                salah
            }
        } tahan (e) {
            tuntut e.pesan() == "nama fungsi tidak boleh menyerupai nama kelas SebuahFungsi"
            benar
        } == benar
    })

    ia("pengenal tidak boleh berakhiran `=`", fn () {
        tuntut coba {
            fn x=() {}
            salah
        } tahan (e) {
            tuntut e.pesan() == "dilarang mendefinisikan pengenal dengan akhiran `=` kecuali sebagai metode dalam kelas"
            benar
        } == benar

        tuntut coba {
            ada x= = fn () {}
            salah
        } tahan (e) {
            tuntut e.pesan() == "dilarang mendefinisikan pengenal dengan akhiran `=` kecuali sebagai metode dalam kelas"
            benar
        } == benar
    })

    ia("bisa mengeksekusi fungsi tanpa pengenal", fn () {
        tuntut fn () {
            benar
        }() == benar
    })

    ia("fungsi yang tak mengutus apapun, secara otomatis mengutus nil", fn () {
       tuntut fn (){}() == nil
    })

    ia(".kobit() mencetak kode bibit", fn () {
        tuntut (fn(){}).kobit() != (fn(){}).kobit()
    })

    ia("memanggil fungsi yang belum didefinisikan menghasilkan `MasalahEksekusi`", fn () {
        tuntut coba {
            abcdef()
        } tahan (e) {
            tuntut e.pesan().berisi?("identitas tidak ditemukan: abcdef")
            benar
        } == benar
    })

    tentang("argumen", fn () {
        ia("memanggil fungsi dengan argumen kurang dari dubutuhkan menghasilkan MasalahArgumen", fn () {
            ada tambah = fn (x, y) { x + y }
            tuntut coba {
                tambah(5)
                salah
            } tahan (e) {
                tuntut e itu MasalahArgumen
                tuntut e.pesan() == "hanya bisa dipanggil dengan 2 argumen"
            } == benar
        })

        xia("argumen tidak dipengaruhi oleh variabel lokal yang memiliki nama yang sama", fn () {
            ada iterasikan = fn (deret, fnPengiterasi) {
                cetak(deret)
                dari (ada i = 0; i < deret.panjang(); i += 1) {
                    fnPengiterasi(deret[i])
                }
            }

            ada deret = []

            cetak(deret)
            iterasikan([1, 2, 3], fn (i) {
                deret << i
            })

            tuntut deret == [1, 2, 3]
        })

        ia("argumen bersifat pass-by-reference", fn () {
            kelas A {
                ada a
                fn a () { a }
                fn a=(x) { a = x }
            }

            ada ubah = fn (a, b) { a.a = b }

            ada a = A.baru()
            tuntut a.a() == nil

            ubah(a, 12)
            tuntut a.a() == 12
        })
    })

    ia("tidak boleh mendefinisikan fungsi bebas dengan kata kunci `sta`", fn () {
        tuntut coba {
            eval!("ada x = fn sta () {}")
            salah
        } tahan (e) {
            tuntut e itu MasalahKode
            tuntut e.pesan() == "fungsi bebas tidak dapat menjadi fungsi statis"
            benar
        } == benar
    })

    ia("fungsi yang mengakibatkan stack overflow tidak menggagalkan sistem", fn () {
        tuntut coba {
            fn x() { x() }
            x()
            salah
        } tahan (e) {
            tuntut e itu MasalahLuapanTumpukan
            tuntut e.pesan() == "terlalu banyak fungsi dalam tumpukan (stack overflow)"
        } == benar
    })

    ia("bisa rekursif", fn () {
        ada fib = fn (n) {
            jika (n <= 1) {
                utus n
            } lain {
                fib(n-1) + fib(n-2)
            }
        }

        tuntut fib(1) == 1
        tuntut fib(2) == 1
        tuntut fib(3) == 2
        tuntut fib(4) == 3
        tuntut fib(5) == 5
        tuntut fib(6) == 8
        tuntut fib(7) == 13
        tuntut fib(8) == 21
        tuntut fib(9) == 34
    })
})
