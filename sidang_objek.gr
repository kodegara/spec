// Hak Cipta (c) 2021 Adam Notodikromo.
// Hak cipta dilindungi undang-undang.
// Penggunaan tunduk pada aturan lisensi.

sidang(Objek, fn () {
    tentang(".kelas()", fn () {
        ia("bisa digunakan dengan `ini`", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn kelasA?() {
                    ini.kelas == A && ini.kelas() == A
                }
            }

            tuntut A.baru().kelasA? == benar
        })

        ia("bisa digunakan seakan variabel", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn kelasA?() {
                    kelas == A
                }
            }

            tuntut A.baru().kelasA? == benar
        })

        ia("bisa dipanggil seakan fungsi", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn kelasA?() {
                    kelas() == A
                }
            }

            tuntut A.baru().kelasA? == benar
        })

        ia("mengembalikan `Kelas` saat digunakan dalam fungsi statis", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn sta kelasKelas?() {
                    kelas == Kelas && kelas() == Kelas && ini.kelas == Kelas && ini.kelas() == Kelas
                }
            }

            tuntut A.kelasKelas? == benar
        })

        ia("tidak bisa didefinisikan ulang", fn () {
            tidakAda!(fn () { A })

            tuntut coba {
                eval!("kelas A { fn kelas() { 123 } }")
                salah
            } tahan (e) {
                tuntut e.pesan == "tidak diperkenankan mendefinisikan fungsi `kelas` karena `kelas` adalah kata kunci"
                benar
            } == benar
        })
    })

    tentang(".metode()", fn () {
        ia("mengutus Deret seluruh fungsi yang bisa dipanggil", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn a() {}
                fn sta b () {}
            }

            ada a = A.baru()

            tuntut a.metode().berisi?("a") == benar
            tuntut a.metode().berisi?("b") == salah
            tuntut A.metode().berisi?("a") == salah
            tuntut A.metode().berisi?("b") == benar
        })

        ia("memiliki metode yang diturunkan dari kelas punca", fn () {
            tidakAda!(fn () { A })

            kelas A {}
            ada a = A.baru()

            tuntut a.metode().berisi?("kobit") == benar
        })

        ia("tidak memiliki metode dari kelas Kelas", fn () {
            kelas Kelas {
                fn hanyaDiKelas() {}
            }

            tuntut Kelas.metode().berisi?("hanyaDiKelas") == benar
            tuntut Integer.metode().berisi?("hanyaDiKelas") == benar
            tuntut 1.metode().berisi?("hanyaDiKelas") == salah
        })
    })

    ia(".nil?() mengecek apakah objek ini `nil`", fn () {
        tuntut nil.nil?() == benar
        tuntut 1.nil?() == salah
        tuntut "".nil?() == salah
        tuntut [].nil?() == salah
        tuntut {}.nil?() == salah
    })

    tentang(".sambut()", fn () {
        ia("mengutus `benar` jika objek dapat menyambut pesan tersebut", fn () {
            tidakAda!(fn () { A })

            kelas A {
                fn a() {}
                fn sta b () {}
            }

            ada a = A.baru()

            tuntut a.sambut?("a") == benar
            tuntut a.sambut?("b") == salah
            tuntut A.sambut?("a") == salah
            tuntut A.sambut?("b") == benar
        })
    })

    tentang(".tuk(arg)", fn () {
        ia("harus diberikan fungsi beraritas 1 sebagai argumen", fn () {
            tuntut coba {
                1.tuk(1)
                salah
            } tahan(e) {
                tuntut e.pesan == "argumen harus berupa fungsi"
                benar
            } == benar

            tuntut coba {
                1.tuk(fn () {})
                salah
            } tahan(e) {
                tuntut e.pesan == "argumen fungsi harus menerima satu parameter"
                benar
            } == benar

            ada diketuk = salah

            tuntut diketuk == salah
            ada hasil = 1.tuk(fn (i) { diketuk = benar; 2 })

            tuntut hasil == 1
            tuntut diketuk == benar
        })

        ia("mengutus objek ini sendiri", fn () {
            tidakAda!(fn () { A })

            kelas A { ada nama }
            ada a = A.baru()

            tuntut a.tuk(fn (obj) {
                obj.nama = "Gara"
            }).nama == "Gara"

            tuntut a == a
        })
    })
})
