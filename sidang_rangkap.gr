// Hak Cipta (c) 2021 Adam Notodikromo.
// Hak cipta dilindungi undang-undang.
// Penggunaan tunduk pada aturan lisensi.

sidang(Rangkap, fn () {
    tentang("instansiasi", fn () {
        tentang("pembentukan secara literal", fn () {
            ia("bisa dibentuk dengan sederhana", fn () {
                ada a = 1, b = 2
                tuntut <1, 2> == <1, 2>
                tuntut <a, b> == <1, 2>
                tuntut <1, 2> == <a, b>
            })

            ia("bisa memiliki titik koma sebagai pemisah ekspresi", fn () {
                <1,2>; <1, 3>
            })

            ia("bisa bisa ditempatkan pada pengenal", fn () {
                ada a = <1, 2, 2 + 3, fn () {}, [], {}, fn () { benar }()>
            })

            xia("bisa bersarang", fn () {
                // todo:
                // <<1, 2>, <3, 4>>
            })

            ia("bisa dibentuk dengan banyak baris", fn () {
                ada nilai = 12
                ada nilaiFn = fn () { 12 }

                ada b = <
                    0,                  // tes literal
                    1,                  // tes literal
                    2 + 3,              // tes infix
                    1 > 1,              // tes infix ambigu >
                    1 < 1,              // tes infix ambigu <
                    fn () {},           // tes fungsi
                    fn () { benar }(),  // tes pemanggilan fungsi
                    1 > nilai,          // tes infix variabel
                    1 < nilai,          // tes infix variabel
                    1 > nilaiFn(),      // tes infix fungsi
                    1 < nilaiFn(),      // tes infix fungsi
                    nilai,              // tes variabel
                    1                   // tes literal setelah variabel
                >

                tuntut b[0] == 0
                tuntut b[1] == 1
                tuntut b[2] == 5
                tuntut b[3] == salah
                tuntut b[4] == salah
                tuntut b[5] itu Fungsi
                tuntut b[6] == benar
                tuntut b[7] == salah
                tuntut b[8] == benar
                tuntut b[9] == salah
                tuntut b[10] == benar
                tuntut b[11] == 12
                tuntut b[12] == 1
            })

            tentang("adanya ekspresi lain yang tidak terkai", fn () {
                ia("bisa dibentuk ketika ekspresi terakhir tersebut adalah Boolean", fn () {
                    tuntut fn () {
                        <1 + 2, 1-1, 1 < 2, 2, 1 > 2>
                        benar
                    }() == benar
                })

                ia("bisa dibentuk ketika ekspresi terakhir tersebut adalah Integer", fn () {
                    tuntut fn () {
                        <1 + 2, 1-1, 1 < 2, 2, 1 > 2>
                        123
                    }() == 123
                })

                xia("bisa dibentuk ketika ekspresi terakhir adalah Fungsi", fn () {
                    // todo: hanya bisa dilakukan kalau kita bisa membedakan whitespace dan newline
                    // fn () {
                    //     <1 + 2, 1-1, 1 < 2, 2, 1 > 2>
                    //     fn () {}
                    // }() == nil
                })

                xia("bisa dibentuk ketika ekspresi terakhir tersebut adalah Deret", fn () {
                    // todo: hanya bisa dilakukan kalau kita bisa membedakan whitespace dan newline
                    tuntut fn() {
                        <1 + 2, 1-1, 1 < 2, 2, 1 > 2>
                        [123]
                    }() == [123]

                    tuntut fn() {
                        <1 + 2, 1-1, 1 < 2, 2, 1 > 2>
                        [123][0]
                    }() == 123
                })

                xia("bisa dibentuk ketika ekspresi terakhir adalah Rangkap", fn () {
                    // todo: hanya bisa dilakukan kalau kita bisa membedakan whitespace dan newline
                    // <1+ 2, 1-1, 1 < 2, 2, 1 > 2>
                    // <1+ 2, 1-1, 1 < 2, 2, 1 > 2, 1>
                    // <1+ 2, 1-1, 1 < 2, 2, 1 > 2, 1 < 2>
                    // <1 < 2, 2, 1 > 2, 1>
                    // <1 < 2, 1 > 2, 1>
                })
            })

            tentang("penggunaan operator yang ambigu", fn () {
                ia("bisa memproses operator > diakhir", fn () {
                    tuntut <0 > 0, 1 > 0, 1 > 2> == <salah, benar, salah>
                    tuntut <1, 1 > 2> == <1, salah>
                })

                ia("bisa memproses operator < diakhir", fn () {
                    tuntut <1 < 0, 1 < 1, 1 < 2> == <salah, salah, benar>
                    tuntut <1, 1 < 2> == <1, benar>
                })

                ia("bisa memproses adanya beragam penggunaan operator `<` dan `>`", fn () {
                    tuntut <1, 1 > 2, 1 < 2> == <1, salah, benar>
                    tuntut <1 > 2, 1> == <salah, 1> // literal biasa diakhir
                })
            })

        })

        ia("bisa dibentuk menggunakan fungsi statis baru", fn () {
            ada a = Rangkap.baru()
            tuntut a == <>
        })
    })

    tentang(".awal()", fn () {
        ia("mengembalikan nilai paling awal dalam Rangkap", fn () {
            tuntut <0, 1, 2, 3>.awal == 0
            tuntut <1, 2, 3, 4>.awal == 1
            tuntut <nil, 1, 2, 3>.awal == nil
        })

        ia("bermasalah jika Rangkap tidak memiliki elemen apapun", fn () {
            tuntut coba {
                <>.awal
                salah
            } tahan (e) {
                tuntut e itu MasalahRangkap
                tuntut e.pesan == "elemen tidak ditemukan"
            } == benar
        })
    })

    tentang(".akhir()", fn () {
        ia("mengembalikan nilai dalam deretan terakhir dalam Rangkap", fn () {
            tuntut <0, 1, 2, 3>.akhir == 3
            tuntut <1, 2, 3, 4>.akhir == 4
            tuntut <1, 2, 3, nil>.akhir == nil
        })
    })

    ia(".jadiDeret() mengubah Rangkap ini menjadi Deret", fn () {
        tuntut <>.jadiDeret() == []
        tuntut <nil>.jadiDeret() == [nil]
        tuntut <1, 2, 3>.jadiDeret == [1, 2, 3]
    })

    tentang(".keduk()", fn () {
        ada f1 = fn () {}
        ada f2 = fn () {}

        ia("bisa memberi elemen dalam Rangkap satu-per-satu tiap pemanggilan", fn () {
            ada pengeduk = <f1, f2>.keduk

            tuntut pengeduk() == f1
            tuntut pengeduk() == f2
        })

        ia("bermasalah jika sudah tidak ada elemen yang bisa dikeduk", fn () {
            ada pengeduk = <f1, f2>.keduk

            tuntut pengeduk() == f1
            tuntut pengeduk() == f2

            tuntut coba {
                pengeduk()
                salah
            } tahan (e) {
                tuntut e.pesan == "elemen tidak ditemukan"
                benar
            } == benar
        })
    })

    tentang(".panjang()", fn () {
        ia("mengutus panjang Rangkap", fn () {
            tuntut <>.panjang() == 0
            tuntut <1, 2, 3>.panjang() == 3
        })
    })

    tentang(".padaPosisi(arg)", fn () {
        ia("bisa menerima Integer", fn () {
            tuntut <0, 1, 2>.padaPosisi(0) == 0
        })

        ia("bisa menerima Kata", fn () {
            ada a = <0, 1, 2>
            a.tambahAlias("nol")
            a["nol"] == 0
        })

        ia("akan bermasalah jika posisi tidak terdefinisikan", fn () {
            tuntut coba {
                <0>.padaPosisi(1)
                salah
            } tahan (e) {
                tuntut e itu MasalahRangkap
                tuntut e.pesan == "elemen tidak ditemukan"
                benar
            } == benar
        })
    })

    tentang(".tambahAlias(arg)", fn () {
        ia("memberi nama alias pada deret Rangkap mulai dari deret paling awal", fn () {
            ada umur = <11, 18, 19, 22>

            ada x = []

            ["andi", "budi", "cintia", "tono"].tiap(fn (nama) {
                tuntut coba {
                    umur[nama]
                    salah
                } tahan (e) {
                    tuntut e itu MasalahRangkap
                    tuntut e.pesan() == "alias tidak terdefinisikan: " + nama
                    x += [nama]
                    benar
                } == benar

                umur.tambahAlias(nama)
            })

            tuntut x == ["andi", "budi", "cintia", "tono"]
        })

        ia("akan bermasalah jika memberi nama melebihi jumlah elemen", fn () {
            tuntut coba {
                <>.tambahAlias("sesuatu")
                salah
            } tahan (e) {
                tuntut e itu MasalahRangkap
                tuntut e.pesan.berisi?("tidak dapat memberi alias `sesuatu`")
                benar
            } == benar
        })

        ia("akan bermasalah jika nama bukan Kata", fn () {
            tuntut coba {
                <>.tambahAlias(123)
                salah
            } tahan (e) {
                cetak(e)
                tuntut e itu MasalahRangkap
                tuntut e.pesan == "hanya bisa menerima Kata sebagai alias"
                benar
            } == benar
        })

        ia("akan bermasalah jika alias sudah terdefinisikan", fn () {
            ada a = <0, 1>
            a.tambahAlias("nol")

            tuntut coba {
                a.tambahAlias("nol")
                salah
            } tahan (e) {
                tuntut e itu MasalahRangkap
                tuntut e.pesan.berisi?("tidak dapat memberi alias `nol` karena sudah menjadi alias posisi ke-0")
                benar
            } == benar
        })
    })
})
